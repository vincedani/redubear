#!/usr/bin/env python3

# Copyright (c) 2024 Daniel Vince.
#
# Licensed under the BSD 3-Clause License
# <LICENSE.md or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except
# according to those terms.

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from filelock import FileLock
from os import environ
from pathlib import Path
from subprocess import Popen, PIPE


def run_command(command, cwd, env=environ):
    process = Popen(command,
                    cwd=cwd.resolve(),
                    env=env,
                    stdout=PIPE,
                    stderr=PIPE)
    _, err = process.communicate()

    memory_usage = str(err, encoding='utf-8').strip()

    # It's ok, oracle scripts should return 1 if the given input does not
    # reproduce the desired behavior.
    memory_usage = memory_usage.replace('Command exited with non-zero status 1\n', '')
    return process.returncode, int(memory_usage)


if __name__ == '__main__':
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('input', type=Path, help='An input file to be checked')

    args = parser.parse_args()

    oracle = Path('$oracle')
    lock_file = Path('$mem_lock')
    memory_file = Path('$mem_file')

    command = [
        '/usr/bin/time', '-f', '%M',
        str(oracle),
        str(args.input),
    ]

    exit_code, memory_usage = run_command(command, args.input.parent)

    lock = FileLock(lock_file)
    with lock:
        with open(memory_file, 'w+') as mem_file:
            data = mem_file.read()
            peak_memory = 0 if data == '' else int(data)

            if memory_usage > peak_memory:
                mem_file.write(str(memory_usage))

    exit(exit_code)
